package one.microstream.demo.bookstore.rest.service;

import java.util.Collection;
import one.microstream.demo.bookstore.data.Data;
import one.microstream.demo.bookstore.jpa.dal.Repositories;
import one.microstream.demo.bookstore.rest.data.transfer.BookRepresentation;
import one.microstream.demo.bookstore.rest.data.transfer.BookSalesRepresentation;
import one.microstream.demo.bookstore.rest.data.transfer.CustomerRepresentation;
import one.microstream.demo.bookstore.rest.data.transfer.EmployeeRepresentation;
import one.microstream.demo.bookstore.rest.data.transfer.PurchaseRepresentation;

/**
 * Should be implemented by any actual service that provides implementations of the seven queries
 * defined in the {@link one.microstream.demo.bookstore.ui.Query#All(Data, Repositories)
 * Query.All(Data, Repositories)} method.
 *
 * @author Benedikt Full
 */
public interface QueryService {

  /**
   * Returns a page of customers.
   *
   * @param page the zero-based index of the page to be returned
   * @return the customers that are part of the requested page
   */
  Collection<CustomerRepresentation> customersPaged(int page);

  /**
   * Searches the books published by authors of the country identified by the given country code
   * that contain the given title string in their own titles.
   *
   * @param title some word or title segment, such as {@code "the"} or {@code "big blue"}
   * @param countryCode a country code, such as {@code "US"} for United States
   * @return the books from the specified country that contain the given string as part of their
   *     title, may be an empty collection
   */
  Collection<BookRepresentation> booksByTitleAndCountry(String title, String countryCode);

  /**
   * Returns all books that have a price that lies within the range defined by the given parameters.
   *
   * @param min the minimum price, inclusive
   * @param max the maximum price, exclusive
   * @return all books with a price in the given range, may be an empty collection if no books have
   *     matching prices
   */
  Collection<BookRepresentation> booksInPriceRange(double min, double max);

  /**
   * Returns the total revenue of the shop identified by the given name for the given year.
   *
   * @param shopName the name of some shop (shop names are unique)
   * @param year the year for which the revenue will be returned
   * @return the revenue value
   */
  double revenueOfShop(String shopName, int year);

  /**
   * Returns the books and amount sold in the given country and year.
   *
   * @param countryCode a country code, such as {@code "US"} for United States
   * @param year the relevant year
   * @return the book sales, may be an empty collection if no relevant sales were found
   */
  Collection<BookSalesRepresentation> bookSales(String countryCode, int year);

  /**
   * Returns the employee for a given year and country with the sales that netted the greatest
   * amount of revenue compared to the revenue generated by the other employees.
   *
   * @param year the relevant year
   * @param countryCode a country code, such as {@code "US"} for United States
   * @return the employee
   */
  EmployeeRepresentation employeeOfTheYear(int year, String countryCode);

  /**
   * Returns the purchases made by foreigners in the given country and year.
   *
   * @param countryCode a country code, such as {@code "US"} for United States
   * @param year the relevant year
   * @return the purchases by foreigners, may be an empty collection
   */
  Collection<PurchaseRepresentation> purchasesOfForeigners(String countryCode, int year);
}
